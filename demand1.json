[
    {
        "instruction":"- The following database schema contains the source and target tables to be converted\n - SQL operations to be aware of include Rename, join, groupby, select, orderby, etc.But not every operation needs to include all of the above\n - Remember that some of the column names of the target table are obtained by renaming the source table, so you should memorize the column names of the target table and use the Rename operation correctly,if any of the columns have changed names, you should be aware of the renaming operation\n - Some table conversions require groupby to generate an intermediate table, and then join with this generated intermediate table, you can generate multiple sql statement segments\n - Your answer should be generated strictly according to the given example\n - You can infer the mapping details from a combination of data, type, and semantic information given in the table",
        "input":"Find the mapping details and operations from the [source_table]artist,exhibition[/source_table] to the [target_table]result[/target_table]\",\"database_schema\":\"CREATE TABLE \"artist\" (\"Artist_ID\" int, \"Name\" text, \"Country\" text, \"Year_Join\" int, \"Age\" int, PRIMARY KEY (\"Artist_ID\")); CREATE TABLE \"exhibition\" (\"Exhibition_ID\" int, \"Year\" int, \"Theme\" text, \"Artist_ID\" int, \"Ticket_Price\" real, PRIMARY KEY (\"Exhibition_ID\"), FOREIGN KEY (`Artist_ID`) REFERENCES `artist`(`Artist_ID`)); CREATE TABLE \"result\" ( \"Name\" text, \"Year\" int, \"Theme\" text, \"Age_Group\" text)",
        "output":"operation1:join[left_node_id:artist,table_id:exhibition,join_type:LEFT_JOIN,join_keys:[\"condition\":\"EQUAL\",\"left_col\":\"Artist_ID\",\"right_col\":\"Artist_ID\"]],operation2:case when[function_id:case_when,condition_type:SINGLE_COLUMN,source_column:Age,conditions:[[operator:<,condition:30,value:young],[operator:>=,condition:30,value:Senior]],target_column:Age_Group]",
        "history":[]
    },
    {
        "instruction":"- The following database schema contains the source and target tables to be converted\n - SQL operations to be aware of include Rename, join, groupby, select, orderby, etc.But not every operation needs to include all of the above\n - Remember that some of the column names of the target table are obtained by renaming the source table, so you should memorize the column names of the target table and use the Rename operation correctly,if any of the columns have changed names, you should be aware of the renaming operation\n - Some table conversions require groupby to generate an intermediate table, and then join with this generated intermediate table, you can generate multiple sql statement segments\n - Your answer should be generated strictly according to the given example\n - You can infer the mapping details from a combination of data, type, and semantic information given in the table",
        "input":"Find the mapping details and operations from the [source_table]book,publication[/source_table] to the [target_table]Author_Publications[/target_table]\",\"database_schema\":\"CREATE TABLE \"publication\" (\"Publication_ID\" int,\"Book_ID\" int,\"Publisher\" text,\"Publication_Date\" text,\"Price\" real,PRIMARY KEY (\"Publication_ID\"),FOREIGN KEY (\"Book_ID\") REFERENCES \"book\"(\"Book_ID\"));INSERT INTO  \"publication\" VALUES (1,1,\"Pearson\",\"August 2008\",\"15000000\");INSERT INTO  \"publication\" VALUES (2,3,\"Thomson Reuters\",\"March 2008\",\"6000000\");CREATE TABLE \"book\" (\"Book_ID\" int,\"Title\" text,\"Issues\" real,\"Writer\" text,PRIMARY KEY (\"Book_ID\"));INSERT INTO  \"book\" VALUES (1,\"The Black Lamb\",\"6\",\"Timothy Truman\");INSERT INTO  \"book\" VALUES (2,\"Bloody Mary\",\"4\",\"Garth Ennis\");CREATE TABLE `Author_Publications` (`Author` TEXT PRIMARY KEY, `Publication_Count` INTEGER);INSERT INTO `Author_Publications` (`Author`, `Publication_Count`) VALUES ('Timothy Truman', 1), ('Michael Moorcock', 1)",
        "output":"operation1:join{\"function_id\":\"join\",\"left_table\":\"book\",\"table_id\":\"publication\",\"join_type\":\"INNER_JOIN\",\"join_keys\":[{\"condition\":\"EQUAL\",\"left_col\":\"Book_ID\",\"right_col\":\"Book_ID\"}]}operation2:groupby{\"function_id\":\"aggregate\",\"group_by\":{\"Writer\"},\"values\":[{\"function_id\":\"count\",\"expression\":[\"Publication_ID\"]}]}operation3:rename{\"function_id\":\"biz_rename\",\"rename_type\":\"special_name\",\"conditions\":[{\"source_column\":\"count_Publication_ID\",\"target_column\":\"total_publications\"}]}operation4:select{\"function_id\":\"keep_columns\",\"column_type\":\"multiple\",\"source_columns\":[\"Writer\",\"total_publications\"]}",
        "history":[]
    },
    {
        "instruction":"- The following database schema contains the source and target tables to be converted\n - SQL operations to be aware of include Rename, join, groupby, select, orderby, etc.But not every operation needs to include all of the above\n - Remember that some of the column names of the target table are obtained by renaming the source table, so you should memorize the column names of the target table and use the Rename operation correctly,if any of the columns have changed names, you should be aware of the renaming operation\n - Some table conversions require groupby to generate an intermediate table, and then join with this generated intermediate table, you can generate multiple sql statement segments\n - Your answer should be generated strictly according to the given example\n - You can infer the mapping details from a combination of data, type, and semantic information given in the table",
        "input":"Find the mapping details and operations from the [source_table]candidate,people[/source_table] to the [target_table]candidate_info[/target_table]\",\"database_schema\":\"CREATE TABLE \"candidate\" (\"Candidate_ID\" int,\"People_ID\" int,\"Poll_Source\" text,\"Date\" text,\"Support_rate\" real,\"Consider_rate\" real,\"Oppose_rate\" real,\"Unsure_rate\" real,);INSERT INTO  \"candidate\" VALUES (1,1,\"WNBC/Marist Poll\",\"Feb 12–15, 2007\",\"0.25\",\"0.30\",\"0.43\",\"0.2\");INSERT INTO  \"candidate\" VALUES (2,3,\"WNBC/Marist Poll\",\"Feb 12–15, 2007\",\"0.17\",\"0.42\",\"0.32\",\"0.9\");CREATE TABLE \"people\" (\"People_ID\" int,\"Sex\" text,\"Name\" text,\"Date_of_Birth\" text,\"Height\" real,\"Weight\" real,PRIMARY KEY (\"People_ID\"));INSERT INTO  \"people\" VALUES (1,\"M\",\"Hubert Henno\",\"06.10.1976\",\"188\",\"83\");INSERT INTO  \"people\" VALUES (2,\"M\",\"Dominique Daquin\",\"10.11.1972\",\"197\",\"85\");CREATE TABLE `Candidate_Info` ( `Candidate_ID` INTEGER PRIMARY KEY, `Person_Name` TEXT, `Poll_Source` TEXT, `Date` TEXT );INSERT INTO `Candidate_Info` (`Candidate_ID`, `Person_Name`, `Poll_Source`, `Date`) VALUES (1, 'Hubert Henno', 'WNBC/Marist Poll', 'Feb 12–15, 2007'), (2, 'Stéphane Antiga', 'WNBC/Marist Poll', 'Feb 12–15, 2007'),",
        "output":"operation1:join{{\"function_id\":\"join\",\"left_table\":\"publication\",\"table_id\":\"book\",\"join_type\":\"INNER_JOIN\",\"join_keys\":[{\"condition\":\"EQUAL\",\"left_col\":\"Book_ID\",\"right_col\":\"Book_ID\"}]}}operation2:rename{\"function_id\":\"biz_rename\",\"rename_type\":\"special_name\",\"conditions\":[{\"source_column\":\"Publication_ID\",\"target_column\":\"Publication_ID\"},{\"source_column\":\"Title\",\"target_column\":\"Book_Title\"},{\"source_column\":\"Publisher\",\"target_column\":\"Publisher\"},{\"source_column\":\"Publication_Date\",\"target_column\":\"Publication_Date\"}]}opeation3:select{\"function_id\":\"biz_rename\",\"rename_type\":\"special_name\",\"conditions\":[{\"source_column\":\"Publication_ID\",\"target_column\":\"Publication_ID\"},{\"source_column\":\"Title\",\"target_column\":\"Book_Title\"},{\"source_column\":\"Publisher\",\"target_column\":\"Publisher\"},{\"source_column\":\"Publication_Date\",\"target_column\":\"Publication_Date\"}]}",
        "history":[]
    },
    {
        "instruction":"- The following database schema contains the source and target tables to be converted\n - SQL operations to be aware of include Rename, join, groupby, select, orderby, etc.But not every operation needs to include all of the above\n - Remember that some of the column names of the target table are obtained by renaming the source table, so you should memorize the column names of the target table and use the Rename operation correctly,if any of the columns have changed names, you should be aware of the renaming operation\n - Some table conversions require groupby to generate an intermediate table, and then join with this generated intermediate table, you can generate multiple sql statement segments\n - Your answer should be generated strictly according to the given example\n - You can infer the mapping details from a combination of data, type, and semantic information given in the table",
        "input":"Find the mapping details and operations from the [source_table]film,cinema[/source_table] to the [target_table]schedule[/target_table]\",\"database_schema\":CREATE TABLE \"film\" (\"Film_ID\" int,\"Rank_in_series\" int,\"Number_in_season\" int,\"Title\" text,\"Directed_by\" text,\"Original_air_date\" text,\"Production_code\" text,PRIMARY KEY (\"Film_ID\"));INSERT INTO  \"film\" VALUES (1,\"26\",\"1\",\"The Case of the Mystery Weekend\",\"Bill Schreiner\",\"September 21–25, 1992\",\"50021–50025\");INSERT INTO  \"film\" VALUES (2,\"27\",\"2\",\"The Case of the Smart Dummy\",\"Bill Schreiner\",\"September 28–October 2, 1992\",\"50231–50235\");CREATE TABLE \"cinema\" (\"Cinema_ID\" int,\"Name\" text,\"Openning_year\" int,\"Capacity\" int,\"Location\" text,PRIMARY KEY (\"Cinema_ID\"));INSERT INTO  \"cinema\" VALUES (1,\"Codling\",\"2010\",\"1100\",\"County Wicklow\");INSERT INTO  \"cinema\" VALUES (2,\"Carrowleagh\",\"2012\",\"368\",\"County Cork\");CREATE TABLE \"schedule\" (\"Cinema_ID\" int,\"Film_ID\" int,\"Date\" text,\"Show_times_per_day\" int,\"Price\" float,PRIMARY KEY (\"Cinema_ID\",\"Film_ID\"),FOREIGN KEY (`Film_ID`) REFERENCES `film`(`Film_ID`),FOREIGN KEY (`Cinema_ID`) REFERENCES `cinema`(`Cinema_ID`));INSERT INTO  \"schedule\" VALUES (1,1,\"21 May\",5,12.99);INSERT INTO  \"schedule\" VALUES (1,2,\"21 May\",3,12.99);CREATE TABLE `Film_Schedule` ( `Film_Title` TEXT, `Cinema_Name` TEXT, `Screening_Date` TEXT, `Show_times_per_day` INTEGER );INSERT INTO `Film_Schedule` (`Film_Title`, `Cinema_Name`, `Screening_Date`, `Show_times_per_day`) VALUES ('The Case of the Mystery Weekend', 'Codling', '21 May', 5), ('The Case of the Smart Dummy', 'Codling', '21 May', 3),",
        "output":"operation1:join{\"function_id\":\"join\",\"left_table\":\"schedule\",\"table_id\":\"cinema\",\"join_type\":\"INNER_JOIN\",\"join_keys\":[{\"condition\":\"EQUAL\",\"left_col\":\"Cinema_ID\",\"right_col\":\"Cinema_ID\"}]}operation2:join{{\"function_id\":\"join\",\"left_table\":\"film\",\"table_id\":\"schedule\",\"join_type\":\"INNER_JOIN\",\"join_keys\":[{\"condition\":\"EQUAL\",\"left_col\":\"Film_ID\",\"right_col\":\"Film_ID\"}]}}operation3:select{\"function_id\":\"keep_columns\",\"column_type\":\"multiple\",\"source_columns\":[\"Title\",\"Name\",\"Date\",\"Show_times_per_day\"]}operation4:rename{\"function_id\":\"biz_rename\",\"rename_type\":\"special_name\",\"conditions\":[{\"source_column\":\"Title\",\"target_column\":\"Film_Title\"},{\"source_column\":\"Name\",\"target_column\":\"Cinema_Name\"},{\"source_column\":\"Date\",\"target_column\":\"Screening_Date\"},{\"source_column\":\"Show_times_per_day\",\"target_column\":\"Show_times_per_day\"}]}",
        "history":[]
    },
    {
        "instruction":"- The following database schema contains the source and target tables to be converted\n - SQL operations to be aware of include Rename, join, groupby, select, orderby, etc.But not every operation needs to include all of the above\n - Remember that some of the column names of the target table are obtained by renaming the source table, so you should memorize the column names of the target table and use the Rename operation correctly,if any of the columns have changed names, you should be aware of the renaming operation\n - Some table conversions require groupby to generate an intermediate table, and then join with this generated intermediate table, you can generate multiple sql statement segments\n - Your answer should be generated strictly according to the given example\n - You can infer the mapping details from a combination of data, type, and semantic information given in the table",
        "input":"Find the mapping details and operations from the [source_table]magazine,issue[/source_table] to the [target_table]Editor_Publications[/target_table]\",\"database_schema\":\"CREATE TABLE \"magazine\" (\"Magazine_ID\" int,\"Issue_ID\" int,\"Publisher\" text,\"Publication_Date\" text,\"Price\" real,);INSERT INTO \"magazine\" VALUES (1, 1, \"National Geographic\", \"April 2023\", 500000);INSERT INTO \"magazine\" VALUES (2, 2, \"Scientific American\", \"June 2023\", 400000);CREATE TABLE \"issue\" (\"Issue_ID\" int,\"Title\" text,\"Editions\" real,\"Editor\" text,);INSERT INTO \"issue\" VALUES (1, \"The Wonders of Nature\", 3, \"Jane Doe\");INSERT INTO \"issue\" VALUES (2, \"Exploring the Cosmos\", 2, \"John Smith\");CREATE TABLE `Editor_Publications` ( `Editor` TEXT PRIMARY KEY, `Publication_Count` INTEGER );INSERT INTO `Editor_Publications` (`Editor`, `Publication_Count`) VALUES ('Jane Doe', 1), ('John Smith', 1),",
        "output":"operation1:join{\"function_id\":\"join\",\"left_table\":\"issue\",\"table_id\":\"magazine\",\"join_type\":\"INNER_JOIN\",\"join_keys\":[{\"condition\":\"EQUAL\",\"left_col\":\"Issue_ID\",\"right_col\":\"Issue_ID\"}]} operation2:groupby{\"function_id\":\"aggregate\",\"group_by\":{\"Editor\"},\"values\":[{\"function_id\":\"count\",\"expression\":\"Magazine_ID\"}]} operation3:rename{\"function_id\":\"biz_rename\",\"rename_type\":\"special_name\",\"conditions\":[{\"source_column\":\"count_Magazine_ID\",\"target_column\":\"total_publications\"}]} operation4:select{\"function_id\":\"keep_columns\",\"column_type\":\"multiple\",\"source_columns\":[\"Editor\",\"total_publications\"]}",
        "history":[]
    },
    {
        "instruction":"- The following database schema contains the source and target tables to be converted\n - SQL operations to be aware of include Rename, join, groupby, select, orderby, etc.But not every operation needs to include all of the above\n - Remember that some of the column names of the target table are obtained by renaming the source table, so you should memorize the column names of the target table and use the Rename operation correctly,if any of the columns have changed names, you should be aware of the renaming operation\n - Some table conversions require groupby to generate an intermediate table, and then join with this generated intermediate table, you can generate multiple sql statement segments\n - Your answer should be generated strictly according to the given example\n - You can infer the mapping details from a combination of data, type, and semantic information given in the table",
        "input":"Find the mapping details and operations from the [source_table]customer,order[/source_table] to the [target_table]product_sales[/target_table]\",\"database_schema\":\"CREATE TABLE \"customer\" (\"Customer_ID\" int,\"First_Name\" text,\"Last_Name\" text,\"Email\" text,\"Phone\" text,PRIMARY KEY (\"Customer_ID\"));INSERT INTO \"customer\" VALUES (1, \"John\", \"Doe\", \"john.doe@example.com\", \"123-456-7890\");INSERT INTO \"customer\" VALUES (2, \"Jane\", \"Smith\", \"jane.smith@example.com\", \"987-654-3210\");CREATE TABLE \"order\" (\"Order_ID\" int,\"Customer_ID\" int,\"Product\" text,\"Quantity\" int,\"Total_Price\" real,PRIMARY KEY (\"Order_ID\"),FOREIGN KEY (\"Customer_ID\") REFERENCES \"customer\"(\"Customer_ID\"));INSERT INTO \"order\" VALUES (1, 1, \"Laptop\", 1, 1500.00);INSERT INTO \"order\" VALUES (2, 1, \"Smartphone\", 2, 1200.00);CREATE TABLE `Product_Sales` ( `Product` TEXT PRIMARY KEY, `Total_Quantity` INTEGER, `Total_Revenue` REAL );INSERT INTO `Product_Sales` (`Product`, `Total_Quantity`, `Total_Revenue`) VALUES ('Laptop', 5, 7500.00), ('Desktop', 3, 4500.00),",
        "output":"CREATE TABLE \"customer\" (\"Customer_ID\" int,\"First_Name\" text,\"Last_Name\" text,\"Email\" text,\"Phone\" text,PRIMARY KEY (\"Customer_ID\"));INSERT INTO \"customer\" VALUES (1, \"John\", \"Doe\", \"john.doe@example.com\", \"123-456-7890\");INSERT INTO \"customer\" VALUES (2, \"Jane\", \"Smith\", \"jane.smith@example.com\", \"987-654-3210\");CREATE TABLE \"order\" (\"Order_ID\" int,\"Customer_ID\" int,\"Product\" text,\"Quantity\" int,\"Total_Price\" real,PRIMARY KEY (\"Order_ID\"),FOREIGN KEY (\"Customer_ID\") REFERENCES \"customer\"(\"Customer_ID\"));INSERT INTO \"order\" VALUES (1, 1, \"Laptop\", 1, 1500.00);INSERT INTO \"order\" VALUES (2, 1, \"Smartphone\", 2, 1200.00);CREATE TABLE `Product_Sales` ( `Product` TEXT PRIMARY KEY, `Total_Quantity` INTEGER, `Total_Revenue` REAL );INSERT INTO `Product_Sales` (`Product`, `Total_Quantity`, `Total_Revenue`) VALUES ('Laptop', 5, 7500.00), ('Desktop', 3, 4500.00),",
        "history":[]
    },
    {
        "instruction":"- The following database schema contains the source and target tables to be converted\n - SQL operations to be aware of include Rename, join, groupby, select, orderby, etc.But not every operation needs to include all of the above\n - Remember that some of the column names of the target table are obtained by renaming the source table, so you should memorize the column names of the target table and use the Rename operation correctly,if any of the columns have changed names, you should be aware of the renaming operation\n - Some table conversions require groupby to generate an intermediate table, and then join with this generated intermediate table, you can generate multiple sql statement segments\n - Your answer should be generated strictly according to the given example\n - You can infer the mapping details from a combination of data, type, and semantic information given in the table",
        "input":"Find the mapping details and operations from the [source_table]inventory,sales[/source_table] to the [target_table]Category_sales[/target_table]\",\"database_schema\"CREATE TABLE \"inventory\" (\"Product_ID\" int,\"Product_Name\" text,\"Category\" text,\"Quantity\" int,\"Unit_Price\" real,PRIMARY KEY (\"Product_ID\"));INSERT INTO \"inventory\" VALUES (1, \"Laptop\", \"Electronics\", 10, 1200.00);INSERT INTO \"inventory\" VALUES (2, \"Smartphone\", \"Electronics\", 20, 800.00);INSERT INTO \"inventory\" VALUES (3, \"Printer\", \"Electronics\", 5, 300.00);CREATE TABLE \"sales\" (\"Sale_ID\" int,\"Product_ID\" int,\"Quantity_Sold\" int,\"Sale_Date\" text,PRIMARY KEY (\"Sale_ID\"),FOREIGN KEY (\"Product_ID\") REFERENCES \"inventory\"(\"Product_ID\"));INSERT INTO \"sales\" VALUES (1, 1, 3, \"2023-01-05\");INSERT INTO \"sales\" VALUES (2, 2, 5, \"2023-02-10\");INSERT INTO \"sales\" VALUES (3, 1, 2, \"2023-03-15\");CREATE TABLE `Category_Sales` ( `Category` TEXT PRIMARY KEY, `Total_Sales` INTEGER, `Average_Price` REAL );INSERT INTO `Category_Sales` (`Category`, `Total_Sales`, `Average_Price`) VALUES ('Electronics', 10, 1000.00), ('Clothing', 15, 50.00), ('Books', 20, 25.00);",
        "output":"operation1:join{\"function_id\":\"join\",\"left_table\":\"inventory\",\"table_id\":\"sales\",\"join_type\":\"INNER_JOIN\",\"join_keys\":[{\"condition\":\"EQUAL\",\"left_col\":\"Product_ID\",\"right_col\":\"Product_ID\"}]}operation2:groupby{\"function_id\":\"aggregate\",\"group_by\":{\"Category\"},\"values\":[{\"function_id\":\"sum\",\"expression\":\"Quantity_Sold\"},{\"function_id\":\"avg\",\"expression\":\"Unit_Price\"}]}opreation3:select{\"function_id\":\"keep_columns\",\"column_type\":\"multiple\",\"source_columns\":[\"Category\",\"total_sales\",\"average_price\"]}",
        "history":[]
    },
    {
        "instruction":"- The following database schema contains the source and target tables to be converted\n - SQL operations to be aware of include Rename, join, groupby, select, orderby, etc.But not every operation needs to include all of the above\n - Remember that some of the column names of the target table are obtained by renaming the source table, so you should memorize the column names of the target table and use the Rename operation correctly,if any of the columns have changed names, you should be aware of the renaming operation\n - Some table conversions require groupby to generate an intermediate table, and then join with this generated intermediate table, you can generate multiple sql statement segments\n - Your answer should be generated strictly according to the given example\n - You can infer the mapping details from a combination of data, type, and semantic information given in the table",
        "input":"Find the mapping details and operations from the [source_table][/source_table] to the [target_table][/target_table]\",\"database_schema\":\"CREATE TABLE \"student\" (\"Student_ID\" int,\"Name\" text,\"Age\" int,\"Grade\" text,PRIMARY KEY (\"Student_ID\"));INSERT INTO \"student\" VALUES (1, \"Emma\", 18, \"A\");INSERT INTO \"student\" VALUES (2, \"Liam\", 17, \"B\");INSERT INTO \"student\" VALUES (3, \"Olivia\", 18, \"A\");CREATE TABLE \"course\" (\"Course_ID\" int,\"Course_Name\" text,\"Teacher\" text,\"Credits\" int,PRIMARY KEY (\"Course_ID\"));INSERT INTO \"course\" VALUES (1, \"Mathematics\", \"Mr. Johnson\", 4);INSERT INTO \"course\" VALUES (2, \"Physics\", \"Ms. Smith\", 3);INSERT INTO \"course\" VALUES (3, \"History\", \"Mr. Davis\", 3);CREATE TABLE `Department_Project_Status` ( `Department` TEXT, `Total_Projects` INTEGER, `Completed_Projects` INTEGER, `In_Progress_Projects` INTEGER );INSERT INTO `Department_Project_Status` (`Department`, `Total_Projects`, `Completed_Projects`, `In_Progress_Projects`) VALUES ('HR', 2, 1, 1), ('IT', 2, 1, 1), ('Finance', 0, 0, 0);",
        "output":"operation1:join{\"function_id\":\"join\",\"left_table\":\"employee\",\"table_id\":\"project\",\"join_type\":\"LEFT_JOIN\",\"join_keys\":[{\"condition\":\"EQUAL\",\"left_col\":\"Department\",\"right_col\":\"Department\"}]}operation2:join{\"function_id\":\"join\",\"left_table\":\"project\",\"table_id\":\"task\",\"join_type\":\"LEFT_JOIN\",\"join_keys\":[{\"condition\":\"EQUAL\",\"left_col\":\"Project_ID\",\"right_col\":\"Project_ID\"}]}operation3:groupby{\"function_id\":\"aggregate\",\"group_by\":{\"Department\"},\"values\":[{\"function_id\":\"count_distinct\",\"expression\":\"Project_ID\"}]}operation4:groupby{{\"function_id\":\"aggregate\",\"group_by\":{\"Department\"},\"values\":[{\"function_id\":\"sum\",\"expression\":\"case_when(status)\"}]}operation5:case_when{\"function_id\":\"case_when\",\"condition_type\":\"SINGLE_COLUMN\",\"source_column\":\"Status\",\"conditions\":[{\"operator\":\"=\",\"condition\":\"Completed\",\"value\":1},{\"operator\":\"!=\",\"condition\":\"Completed\",\"value\":0}],\"target_column\":\"completed_projects\"}operation6:groupby{\"function_id\":\"aggregate\",\"group_by\":{\"Department\"},\"values\":[{\"function_id\":\"sum\",\"expression\":\"case_when(status)\"}]}operation7:case_when{\"function_id\":\"case_when\",\"condition_type\":\"SINGLE_COLUMN\",\"source_column\":\"Status\",\"conditions\":[{\"operator\":\"=\",\"condition\":\"In progress\",\"value\":1},{\"operator\":\"!=\",\"condition\":\"In progress\",\"value\":0}],\"target_column\":\"completed_projects\"}operation8:rename{\"function_id\":\"biz_rename\",\"rename_type\":\"special_name\",\"conditions\":[{\"source_column\":\"Project_ID\",\"target_column\":\"total_projects\"}]}operation9:select{\"function_id\":\"keep_columns\",\"column_type\":\"multiple\",\"source_columns\":[\"Department\",\"total_projects\",\"completed_projects\",\"in_progress_projects\"]}",
        "history":[]
    }
]